{{ 'package ' + model.package_tree + '.' + entity.name + ';' }}

{# Imports #}
{{ 'import jakarta.persistence.EntityNotFoundException;' }}
{{ 'import java.util.List;' }}
{{ 'import org.slf4j.Logger;' }}
{{ 'import org.springframework.beans.BeanUtils;' }}
{{ 'import org.springframework.dao.DataAccessException;' }}
{{ 'import org.springframework.stereotype.Service;' }}
{# // Imports #}

{# Class #}
{{ '@Service' }}
{{ 'public class ' + entity.name + 'Service {' }}

    {# Logger #}
    {{ 'private static final Logger logger = ' + entity.name + '.logger;' }}
    {# // Logger #}
    
    {# Service injection #}
    {{ 'private final ' + entity.name + 'Repository ' + entity.name | lowercase_first + 'Repository;' }}
    {# // Service injection #}

    {# Constructor #}
    {{ 'public ' + entity.name + 'Service(' + entity.name + 'Repository ' + entity.name | lowercase_first + 'Repository) {' }}
        {{ 'this.' + entity.name | lowercase_first + 'Repository = ' + entity.name | lowercase_first + 'Repository;' }}
	{{ '}' }}
    {# // Constructor #}

    {# GET #}
    {{ '/**' }}
    {{ ' * Retrieves all ' + entity.name + ' entities from the repository.' }}
    {{ ' *' }}
    {{ ' * @return a List of ' + entity.name + ' objects representing all ' + entity.name | plural + ' in the repository' }}
    {{ ' * @throws DataAccessException if a data access error occurs while retrieving the ' + entity.name | plural }}
    {{ ' * @throws RuntimeException if any unexpected error occurs' }}
    {{ ' */' }}
    {{ 'public List<' + entity.name + '> getAll' + entity.name | plural + '() {' }}
        {{ 'try {' }}
            {{ '// Retrieve all ' + entity.name | plural + ' from the repository' }}
            {{ 'return ' + entity.name | lowercase_first + 'Repository.findAll();' }}
        {{ '} catch (DataAccessException e) {' }}
            {{ 'logger.error("Data access error occurred while retrieving all ' + entity.name | plural + ': " + e.getMessage(), e);' }}
            {{ 'throw e;' }}
        {{ '} catch (Exception e) {' }}
            {{ 'logger.error("Unexpected error occurred while retrieving all ' + entity.name | plural + ': " + e.getMessage(), e);' }}
            {{ 'throw new RuntimeException("Unexpected error occurred while retrieving all ' + entity.name | plural + ': " + e.getMessage(), e);' }}
        {{ '}' }}
    {{ '}' }}

    {{ '/**' }}
    {{ ' * Retrieves an existing ' + entity.name + ' entity by its ID from the repository.' }}
    {{ ' *' }}
    {{ ' * @param ' + entity.id_property + ' the ID of the ' + entity.name + ' to retrieve' }}
    {{ ' * @return the ' + entity.name + ' object with the specified ID' }}
    {{ ' * @throws IllegalArgumentException if the ID is null or <= 0' }}
    {{ ' * @throws EntityNotFoundException if no ' + entity.name + ' with the given ID exists' }}
    {{ ' * @throws DataAccessException if a data access error occurs while retrieving the ' + entity.name }}
    {{ ' * @throws RuntimeException if any unexpected error occurs' }}
    {{ ' */' }}
    {{ 'public ' + entity.name + ' get' + entity.name + 'ById(Long ' + entity.id_property + ') {' }}
        {{ 'try {' }}
            {{ '// Validate ' + entity.id_property }}
            {{ 'if (' + entity.id_property + ' == null || ' + entity.id_property + ' <= 0) {' }}
                {{ 'throw new IllegalArgumentException("Invalid ' + entity.id_property + '");' }}
            {{ '}' }}
            {{ '// Retrieve and return the ' + entity.name + ' if found, otherwise throw EntityNotFoundException' }}
            {{ 'return ' + entity.name | lowercase_first + 'Repository.findById(' + entity.id_property + ')' }}
            {{ '.orElseThrow(() -> new EntityNotFoundException("Could not find ' + entity.name + ' with ID: " + ' + entity.id_property + '));' }}
        {{ '} catch (IllegalArgumentException e) {' }}
            {{ 'logger.error("Invalid ' + entity.id_property + ': " + e.getMessage(), e);' }}
            {{ 'throw e;' }}
        {{ '} catch (EntityNotFoundException e) {' }}
            {{ 'logger.error("EntityNotFoundException occurred while retrieving ' + entity.name + ' with ID " + ' + entity.id_property + ' + ": " + e.getMessage(), e);' }}
            {{ 'throw e;' }}
        {{ '} catch (DataAccessException e) {' }}
            {{ 'logger.error("Data access error occurred while retrieving ' + entity.name + ' with ID " + ' + entity.id_property + ' + ": " + e.getMessage(), e);' }}
            {{ 'throw e;' }}
        {{ '} catch (Exception e) {' }}
            {{ 'logger.error("Unexpected error occurred while retrieving ' + entity.name + ' with ID " + ' + entity.id_property + ' + ": " + e.getMessage(), e);' }}
            {{ 'throw new RuntimeException("Unexpected error occurred while retrieving ' + entity.name + ' with ID " + ' + entity.id_property + ' + ": " + e.getMessage(), e);' }}
        {{ '}' }}
    {{ '}' }}
    {# // GET #}

    {# POST #}
    {{ '/**' }}
    {{ '* Creates a new ' + entity.name + ' entity in the repository.' }}
    {{ '*' }}
    {{ '* @param ' + entity.name | lowercase_first + ' the ' + entity.name + ' object to create' }}
    {{ '* @return the created ' + entity.name + ' object' }}
    {{ '* @throws IllegalArgumentException if the provided ' + entity.name | lowercase_first + ' object is null' }}
    {{ '* @throws DataAccessException if a data access error occurs during ' + entity.name + ' creation' }}
    {{ '* @throws RuntimeException if any unexpected error occurs' }}
    {{ '*/' }}
    {{ 'public ' + entity.name + ' create' + entity.name + '(' + entity.name + ' ' + entity.name | lowercase_first + ') {' }}
        {{ 'try {' }}
            {{ '// Validate ' + entity.name | lowercase_first }}
            {{ 'if (' + entity.name | lowercase_first + ' == null) {' }}
                {{ 'throw new IllegalArgumentException("Invalid ' + entity.name | lowercase_first + ' data");' }}
            {{ '}' }}
            {{ '// Save and return the created ' + entity.name }}
            {{ 'return ' + entity.name | lowercase_first + 'Repository.save(' + entity.name | lowercase_first + ');' }}
        {{ '} catch (IllegalArgumentException e) {' }}
            {{ 'logger.error("Invalid ' + entity.name | lowercase_first + ' data: " + e.getMessage(), e);' }}
            {{ 'throw e;' }}
        {{ '} catch (DataAccessException e) {' }}
            {{ 'logger.error("Data access error occurred while creating a new ' + entity.name + ': " + e.getMessage(), e);' }}
            {{ 'throw e;' }}
        {{ '} catch (Exception e) {' }}
            {{ 'logger.error("Unexpected error occurred while creating a new ' + entity.name + ': " + e.getMessage(), e);' }}
            {{ 'throw new RuntimeException("Unexpected error occurred while creating a new ' + entity.name + ': " + e.getMessage(), e);' }}
        {{ '}' }}
    {{ '}' }}
    {# // POST #}

    {# PUT #}
    {{ '/**' }}
    {{ ' * Updates an existing ' + entity.name + ' entity in the repository.' }}
    {{ ' *' }}
    {{ ' * @param ' + entity.id_property + ' the ID of the ' + entity.name + ' to update' }}
    {{ ' * @param updated' + entity.name + ' the updated ' + entity.name + ' object with new data' }}
    {{ ' * @return the updated ' + entity.name + ' object' }}
    {{ ' * @throws IllegalArgumentException if the ID is null or <= 0, or if updated' + entity.name + ' is null' }}
    {{ ' * @throws EntityNotFoundException if no ' + entity.name + ' with the given ID exists' }}
    {{ ' * @throws DataAccessException if a data access error occurs during ' + entity.name + ' update' }}
    {{ ' * @throws RuntimeException if any unexpected error occurs' }}
    {{ ' */' }}
    {{ 'public ' + entity.name + ' update' + entity.name + '(Long ' + entity.id_property + ', ' + entity.name + ' updated' + entity.name + ') {' }}
        {{ 'try {' }}
            {{ '// Validate ' + entity.id_property }}
            {{ 'if (' + entity.id_property + ' == null || ' + entity.id_property + ' <= 0) {' }}
                {{ 'throw new IllegalArgumentException("Invalid ' + entity.id_property + '");' }}
            {{ '}' }}
            {{ '// Validate updated' + entity.name }}
            {{ 'if (updated' + entity.name + ' == null) {' }}
                {{ 'throw new IllegalArgumentException("Invalid updated' + entity.name + ' data.");' }}
            {{ '}' }}
            {{ '// Find existing ' + entity.name + ' by ID or throw EntityNotFoundException' }}
            {{ entity.name + ' existing' + entity.name + ' = ' + entity.name | lowercase_first + 'Repository.findById(' + entity.id_property + ')' }}
            {{ '.orElseThrow(() -> new EntityNotFoundException("Could not find ' + entity.name + ' with ID: " + ' + entity.id_property + '));' }}
            {{ '// Copy all properties from updated' + entity.name + ' to existing' + entity.name + ', excluding ' + entity.id_property }}
            {{ 'BeanUtils.copyProperties(updated' + entity.name + ', existing' + entity.name + ', "' + entity.id_property + '");' }}
            {{ '// Save and return the updated ' + entity.name | lowercase_first }}
            {{ 'return ' + entity.name | lowercase_first + 'Repository.save(existing' + entity.name + ');' }}
        {{ '} catch (IllegalArgumentException e) {' }}
            {{ 'logger.error("Invalid input data: " + e.getMessage(), e);' }}
            {{ 'throw e;' }}
        {{ '} catch (EntityNotFoundException e) {' }}
            {{ 'logger.error("EntityNotFoundException occurred while updating ' + entity.name + ' with ID " + ' + entity.id_property + ' + ": " + e.getMessage(), e);' }}
            {{ 'throw e;' }}
        {{ '} catch (DataAccessException e) {' }}
            {{ 'logger.error("Data access error occurred while updating ' + entity.name + ' with ID " + ' + entity.id_property + ' + ": " + e.getMessage(), e);' }}
            {{ 'throw e;' }}
        {{ '} catch (Exception e) {' }}
            {{ 'logger.error("Unexpected error occurred while updating ' + entity.name + ' with ID " + ' + entity.id_property + ' + ": " + e.getMessage(), e);' }}
            {{ 'throw new RuntimeException("Unexpected error occurred while updating ' + entity.name + ' with ID " + ' + entity.id_property + ' + ": " + e.getMessage(), e);' }}
        {{ '}' }}
    {{ '}' }}
    {# // PUT #}

    {# DELETE #}
    {{ '/**' }}
    {{ ' * Deletes an existing ' + entity.name + ' entity from the repository.' }}
    {{ ' *' }}
    {{ ' * @param ' + entity.id_property + ' the ID of the ' + entity.name + ' to delete' }}
    {{ ' * @return true if the ' + entity.name + ' was successfully deleted, false otherwise' }}
    {{ ' * @throws DataAccessException if a data access error occurs during ' + entity.name + ' deletion' }}
    {{ ' * @throws RuntimeException if any unexpected error occurs' }}
    {{ ' */' }}
    {{ 'public boolean delete' + entity.name + '(Long ' + entity.id_property + ') {' }}
        {{ 'try {' }}
            {{ '// Check if ' + entity.name + ' exists' }}
            {{ 'boolean ' + entity.name | lowercase_first + 'Exists = ' + entity.name | lowercase_first + 'Repository.existsById(' + entity.id_property + ');' }}
            {{ 'if (!' + entity.name | lowercase_first + 'Exists) {' }}
                {{ 'logger.warn("' + entity.name + ' with ID {} not found for deletion", ' + entity.id_property + ');' }}
                {{ 'return false;' }}
            {{ '}' }}
            {{ '// Delete the ' + entity.name }}
            {{ entity.name | lowercase_first + 'Repository.deleteById(' + entity.id_property + ');' }}
            {{ 'return true;' }}
        {{ '} catch (DataAccessException e) {' }}
            {{ 'logger.error("Data access error occurred while deleting ' + entity.name + ' with ID " + ' + entity.id_property + ' + ": " + e.getMessage(), e);' }}
            {{ 'throw e;' }}
        {{ '} catch (Exception e) {' }}
            {{ 'logger.error("Unexpected error occurred while deleting ' + entity.name + ' with ID " + ' + entity.id_property + ' + ": " + e.getMessage(), e);' }}
            {{ 'throw new RuntimeException("Unexpected error occurred while deleting ' + entity.name + ' with ID " + ' + entity.id_property + ' + ": " + e.getMessage(), e);' }}
        {{ '}' }}
    {{ '}' }}
    {# // DELETE #}

{{ '}' }}
{# // Class #}
